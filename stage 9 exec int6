
//int 6 exec system call

alias physicalSp S0;
physicalSp = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSp - 1];

alias fileName S2;
fileName = [physicalSp - 3];

//Correctly Working 


if(sysCallNo == 9) then 
    //Searching for file in FAT
    alias i S3;
    i = 0;
    while(i < 64) do
        if([FAT + 8 * i + 2] != -1) then 
            if([FAT + 8 * i + 0] == fileName) then 
                break;
            endif;
        endif;
        i = i + 1;
    endwhile;
    

    //File Not Found 
    if(i >= 64) then 
        [physicalSp - 2] = -1;
        ireturn;
    endif;

    //File Found

    alias basicBlock S4;
    basicBlock = [FAT + 8 * i + 2];

    //Loading in SCARTCHPAD
    load(1,basicBlock);


    //Counting no of code block of new program 
    i = 0;
    alias codeBlock S5;
    codeBlock = 0;
    while(i < 512 && [512 + i] != -1) do  
            codeBlock = codeBlock + 1;
            i = i + 1;
    endwhile;

    //More pages than 3 || Not a Program
    if(codeBlock > 3) then 
        [physicalSp - 2] = -1;
        ireturn;
    endif;


    //Counting valid pages in current process
    alias validCodePages S6;
    validCodePages = 0;
    i = 0;
    while(i < PTLR) do 
        if([PTBR + 2 * i + 0] != -1) then 
            validCodePages = validCodePages + 1;
        endif;
        i = i + 1;
    endwhile;

    //Decreament 1 stack page 
    validCodePages = validCodePages - 1;


    alias diffPages S7;
    diffPages = validCodePages - codeBlock;

    //Working Correctly



    //More Pages 
    if(diffPages > 0) then 
        i = validCodePages - 1;
        while(diffPages != 0) do
            [MEM_LIST + [PTBR + 2 * i + 0]] = 0; //Deallocate;
            [PTBR + 2 * i + 0] = -1;
            [PTBR + 2 * i + 1] = "00";
            diffPages = diffPages - 1;
            i = i - 1;
        endwhile;
    endif;


    diffPages = validCodePages - codeBlock;

    //Less Pages. Have to Allocate more


    if(diffPages < 0) then 
        diffPages = -1 * diffPages;

        //Searching memory for available pages 
        alias count S8;
        count = 0;
        i = 29;
        while(i < 64) do 
            if([MEM_LIST + i] == 0) then    
                count = count + 1;
                if(count >= diffPages) then 
                    break;
                endif;
            endif;
            i = i + 1;
        endwhile;

        //Not Enough Pages found 
        if(i >= 64) then 
            [physicalSp - 2] = -1;
            ireturn;
        endif;
        
        //Allocating new pages 
        alias index S9;
        index = validCodePages;
        i = 29;
        while(diffPages != 0) do 
            if([MEM_LIST + i] == 0) then 
                [PTBR + 2 * index + 0] = i;
                [MEM_LIST + i] = 1;         //Mark as used
                [PTBR + 2 * i + 1] = "01";
                diffPages = diffPages - 1;
                index = index + 1;
            endif;
            i = i + 1;
        endwhile;
    endif;

    //Now Pages are Equal

    //Load all code blocks according to Page Table entry
        i = 0;
        while(i < PTLR - 1) do 
            if([PTBR + 2 * i + 0] != -1) then
                load([PTBR + 2 * i + 0],[512 + i]);
            endif;
            i = i + 1;
        endwhile;

    //Closing files of the current process
    i = 0;
    alias fileIndex S9;
    while(i < 8) do
        if([READY_LIST + 32 * ((PTBR - 1024) / 8) + 15 + i * 2 + 0] != -1) then 
             fileIndex = [READY_LIST + 32 * ((PTBR - 1024) / 8) + 15 + i * 2 + 0];
             [READY_LIST + 32 * ((PTBR - 1024) / 8) + 15 + i * 2 + 0] = -1;
             [READY_LIST + 32 * ((PTBR - 1024) / 8) + 15 + i * 2 + 1] = -1;
             [FILE_TABLE + 2 * fileIndex + 1] = [FILE_TABLE + 2 * fileIndex + 1] - 1;
             if([FILE_TABLE + 2 * fileIndex + 1] == 0) then 
                [FILE_TABLE + 2 * fileIndex + 0] = -1;
            endif;
            [READY_LIST + 32 * ((PTBR - 1024) / 8) + 15 + i * 2 + 0] = -1;//redundant
            [READY_LIST + 32 * ((PTBR - 1024) / 8) + 15 + i * 2 + 1] = -1;
        endif;
        i = i + 1;
    endwhile;


    //Setting New SP
    SP = 3 * 512;

    //Setting New IP
    alias physicalNewSp S6;
    physicalNewSp = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
    [physicalNewSp] = 0;

endif;

ireturn;

// int6 end






//startup


[READY_LIST + 0] = 0;
[READY_LIST + 1] = 2; // running state
PTBR = 1024; 
PTLR = 4; 
[PTBR + 0] = 25; 
[PTBR + 1] = "01";	
[PTBR + 2] = 26; 
[PTBR + 3] = "01";	
[PTBR + 4] = 27; 
[PTBR + 5] = "01";	
[PTBR + 6] = 28; 
[PTBR + 7] = "01"; 
SP = 3 * 512; 
[28 * 512] = 0;
load(7,1);//exhandler
load(8,2);
load(9,3);
load(10,4);	
load(11,5);
load(12,6);
load(13,7);// interrupt 2 rutine
load(14,8);
load(15,9);
load(16,10);
load(17,11);
load(18,12);
load(19,13);
load(20,14);
load(21,15);
load(22,16);
load(23,17);
load(24,18);
load (5, 19);// fat table
load (6, 20);// disk free list
load(25,21); 
load(26,22); 
load(27,23);

alias counter S0;			
counter = 0;
while ( counter <  128) do			
	[ FILE_TABLE + counter ] = -1;	
	[ FILE_TABLE + counter + 1] =  0; //SWOFT	
	counter = counter + 2;			
endwhile;

counter = 15;
while ( counter <= 30) do
	[READY_LIST + counter] =-1;   //PPOFT
	counter=counter+1;
endwhile;
counter = 0;
while ( counter<=28 ) do 	// used page in memory free list
	[1280 + counter ] =1;
	counter=counter+1;
endwhile;
while ( counter<64) do 
	[1280 + counter ] =0 ;//UNUSED pages in memory free list
	counter=counter+1;
endwhile;
counter = 1;
while( counter<32) do
	[READY_LIST + counter *32 + 1] =0; //state of all pcb's is 0 means terminated
	counter= counter+1;
endwhile;


print("want to know");
breakpoint;

ireturn;


//startup end







//timer start




//Saving current process state 
alias currentPID S0;
currentPID = (PTBR - 1024) / 8;
alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;

//Saving in PCB
[currentPCB + 1] = 1; //State
[currentPCB + 2] = BP;
[currentPCB + 3] = SP - 1;
alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[currentPCB + 4] = [physicalSP];
[currentPCB + 5] = PTBR;
[currentPCB + 6] = PTLR;
[currentPCB + 7] = R0;
[currentPCB + 8] = R1;
[currentPCB + 9] = R2;
[currentPCB + 10] = R3;
[currentPCB + 11] = R4;
[currentPCB + 12] = R5;
[currentPCB + 13] = R6;
[currentPCB + 14] = R7;


//finding next process
alias nextPID S3;
nextPID = (currentPID + 1) % 32;

while([READY_LIST + 32 * nextPID + 1] != 1) do 
    nextPID = (nextPID + 1) % 32;
endwhile;
alias nextPCB S4;
nextPCB = READY_LIST + nextPID * 32;

//Scheduling next Process
R0 = [nextPCB + 7];
R1 = [nextPCB + 8];
R2 = [nextPCB + 9];
R3 = [nextPCB + 10];
R4 = [nextPCB + 11];
R5 = [nextPCB + 12];
R6 = [nextPCB + 13];
R7 = [nextPCB + 14];
BP = [nextPCB + 2];
SP = [nextPCB + 3];
PTBR = [nextPCB + 5];
PTLR = [nextPCB + 6];
SP = SP + 1;
alias newPhysicalSp S5;
newPhysicalSp = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[newPhysicalSp] = [nextPCB + 4];
[nextPCB + 1] = 2;
ireturn;




//timer end

alias physicalSp S0;
physicalSp = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

//System Call No 
alias sysCallNo S1;
sysCallNo = [physicalSp - 1];

if(sysCallNo == 8) then 
    alias pcbIndex S2;
    pcbIndex = 0;
    while(pcbIndex < 32) do 
        if([READY_LIST + pcbIndex * 32 + 1] == 0) then 
            break;
        endif;
        pcbIndex = pcbIndex + 1;
    endwhile;
    

    //NO free PCB Found
    if(pcbIndex >= 32) then 
        [physicalSp - 2] = -1;
        ireturn;
    endif;

    //Found 
    alias newPCB S3;
    newPCB = READY_LIST + 32 * pcbIndex;
    [newPCB + 0] = pcbIndex; //setting PID



    //Counting valid pages of parent process
    alias i S2;
    alias validPages S4;
    validPages = 0;
    i = 0;
    while(i < PTLR) do 
        if([PTBR + i * 2 + 0] != -1 && ([PTBR + 2 * i + 1] == "01" || [PTBR + 2 * i + 1] == "11")) then 
            validPages = validPages + 1;
        endif;
        i = i + 1;
    endwhile;
 

    //Counting Free pages in Memeory
    alias freePages S5;
    freePages = 0;
    i = 29;
    while(i < 64) do 
        if([MEM_LIST + i] == 0) then 
            freePages = freePages + 1;
        endif;
        i = i + 1;
    endwhile;


    //Not enough pages in Memeory
    if(validPages > freePages) then 
        [physicalSp - 2] = -1;
        ireturn;
    endif;


    //Enough Free Pages Found
    alias newPTBR S6;
    newPTBR = PAGE_TABLE + [newPCB + 0] * 8;
    
    //Working Correctly

    alias indexMem S7;
    alias parentPage S8;
    alias k S9;
    i = 0;
    while(i < PTLR) do  
        if([PTBR + i * 2 + 0] != -1 && ([PTBR + 2 * i + 1] == "01" || [PTBR + 2 * i + 1] == "11")) then 
            indexMem = 29;
            while(indexMem < 64) do 
                if([MEM_LIST + indexMem] == 0) then 
                    break;
                endif;
                indexMem = indexMem + 1;
            endwhile;
            [newPTBR + i * 2 + 0] = indexMem;
            [newPTBR + i * 2 + 1] = [PTBR + i * 2 + 1];
            //Copying data
            k = 0;
            parentPage = [PTBR + i * 2 + 0];
            while(k < 512) do 
                [indexMem * 512 + k] = [parentPage * 512 + k];
                k = k + 1;
            endwhile;
            [MEM_LIST + indexMem] = 1;
        else 
            [newPTBR + i * 2 + 0] = [PTBR + 2 * i + 0];
            [newPTBR + i * 2 + 1] = [PTBR + 2 * i + 1];
        endif;
        i = i + 1;
    endwhile;
    
    //Working Correctly


    //Copying Registers 
    [newPCB + 2] = BP; 
    [newPCB + 3] = SP - 1;//logical
    [newPCB + 4] = [physicalSp]; 
    [newPCB + 5] = newPTBR;
    [newPCB + 6] = PTLR;
    [newPCB + 7] = R0;
    [newPCB + 8] = R1;
    [newPCB + 9] = R2;
    [newPCB + 10] = R3;
    [newPCB + 11] = R4;
    [newPCB + 12] = R5;
    [newPCB + 13] = R6;
    [newPCB + 14] = R7;
    //Returning PID of child to parent
    [physicalSp - 2] = [newPCB + 0];


    alias childSp S7;
    childSp = [newPCB + 3];
    alias physicalChildSp S8;
    physicalChildSp = ([newPTBR + 2 * (childSp / 512)] * 512) + (childSp % 512);

    [physicalChildSp - 1] = -2;
    [newPCB + 1] = 1; //State of child process

    //Copying File Information 
    i = 15;
    alias parrentPCB S9;
    parrentPCB = READY_LIST + 32 * ((PTBR - 1024) / 8);
    while(i < 31) do 
        [newPCB + i] = [parrentPCB + i];
        i = i + 1;
    endwhile;

    //Marking System wide open fileTable
    i = 0;
    alias fileIndex S9;
    while(i < 8) do 
        fileIndex = [newPCB + 15 + i * 2 + 0];
        if(fileIndex != -1) then
            [FILE_TABLE + 2 * fileIndex + 1] = [FILE_TABLE + 2 * fileIndex + 1] + 1;
        endif;
        i = i + 1;
    endwhile;

endif;
print("in int 5");
breakpoint;
ireturn;
